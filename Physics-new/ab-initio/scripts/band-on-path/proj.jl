using DelimitedFiles

"""
Read a file like `WTe2.pdos_atm#1(W)_wfc#2(s_j0.5)` 
generated by `projwfc.x`.
"""
function read_proj_pdos_atm(path)
    readdlm(path, skipstart = 1)
end

function list_proj_pdos_filenames(atom_specie, atom_indices, orbitals)
    res = map(atom_indices) do atom_idx
        map(orbitals |> enumerate) do pair
            orbital_idx, orbital_name = pair
            "WTe2.pdos_atm#$atom_idx($atom_specie)_wfc#$orbital_idx($orbital_name)"
        end
    end
    vcat(res...)
end

"""
Read all files corresponding to the same atom 
generated by `projwfc.x`.
For example, if we do an SOC calculation
and we want to obtain all data corresponding to W, 
then we need to read 
```text
WTe2.pdos_atm#1(W)_wfc#1(s_j0.5)  
WTe2.pdos_atm#1(W)_wfc#2(s_j0.5)  
WTe2.pdos_atm#1(W)_wfc#3(p_j0.5)  
WTe2.pdos_atm#1(W)_wfc#4(p_j1.5)  
WTe2.pdos_atm#1(W)_wfc#5(p_j0.5)  
WTe2.pdos_atm#1(W)_wfc#6(p_j1.5)  
WTe2.pdos_atm#1(W)_wfc#7(d_j1.5)  
WTe2.pdos_atm#1(W)_wfc#8(d_j2.5)  
WTe2.pdos_atm#2(W)_wfc#1(s_j0.5)  
WTe2.pdos_atm#2(W)_wfc#2(s_j0.5)  
WTe2.pdos_atm#2(W)_wfc#3(p_j0.5)  
WTe2.pdos_atm#2(W)_wfc#4(p_j1.5)  
WTe2.pdos_atm#2(W)_wfc#5(p_j0.5)  
WTe2.pdos_atm#2(W)_wfc#6(p_j1.5)  
WTe2.pdos_atm#2(W)_wfc#7(d_j1.5)  
WTe2.pdos_atm#2(W)_wfc#8(d_j2.5)
```
The data from all these files can be obtained by 
```julia
list_proj_pdos_filenames("W", 1:2, 
    ["s_j0.5", "s_j0.5", "p_j0.5", "p_j1.5", "p_j0.5", "p_j1.5", "d_j1.5", "d_j2.5"])
```

The return type is `Vector{Matrix{Float64}}`,
each matrix inside the vector 
corresponds to one file.
We didn't use `Array{Float64, 3}`, 
because the number of column differs among the output files of `projwfc.x`.
"""
function read_proj_pdos_atm(atom_specie, atom_indices, orbitals)
    map(list_proj_pdos_filenames(atom_specie, atom_indices, orbitals)) do filename
        read_proj_pdos_atm(filename)
    end
end

"""
`dos_data` should be the return value of, say, `read_proj_pdos_atm`.
The energy grid and the summed DOS are returned.
"""
function sum_dos(dos_data)
    energy_grid = dos_data[1][:, 1]
    
    summed_dos = zeros(length(energy_grid))
    map(dos_data) do dos_data_in_one_atom
        summed_dos += dos_data_in_one_atom[:, 2]
    end
    
    (energy_grid, summed_dos)
end

"""
`dos_data` should be the return value of, say, `read_proj_pdos_atm`.
The energy grid and the summed DOS are returned.
`indices` indicates what components in `dos_data` should be sum over; 
the relation between the indices and the `WTe2.pdos_atm#` files 
follows the convention in [`read_proj_pdos_atm`](@ref) and [`list_proj_pdos_filenames`](@ref).
"""
function sum_dos(dos_data, indices)
    energy_grid = dos_data[1][:, 1]
    
    summed_dos = zeros(length(energy_grid))
    for i in indices
        dos_data_in_one_atom = dos_data[i]
        summed_dos += dos_data_in_one_atom[:, 2]
    end
    
    (energy_grid, summed_dos)
end

"""
Map the DOS data stored in `dos` 
to each state in `ε_kn`.
"""
function find_dos(ε_kn, energy_grid, dos)
    Δε = energy_grid[2] - energy_grid[1]
    min_ε = energy_grid[1]

    nkp, nbnd = size(ε_kn)
    dos_kn = zeros(nkp, nbnd)

    for k_idx in 1 : nkp
        for band_idx in 1 : nbnd
            ε_idx = Int(floor((ε_kn[k_idx, band_idx] - min_ε) / Δε)) + 1
            dos_kn[k_idx, band_idx] = dos[ε_idx]
        end
    end
    
    dos_kn
end