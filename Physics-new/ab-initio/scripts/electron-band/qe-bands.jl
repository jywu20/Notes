using DelimitedFiles

"""
Read the number of k-points and bands. 
The return value is a tuple, 
the first being `nkp`, 
the second being `nbnd`.

Example: 
```julia
read_qe_bands_x_size("WTe2_bands.dat")
```
"""
function read_qe_bands_x_size(band_plot_path)
    data = readlines(band_plot_path)
    data = split(data[1])

    nbnd = data[3][1:end-1]
    nbnd = parse(Int, nbnd)

    nkp = data[5]
    nkp = parse(Int, nkp)

    (nkp, nbnd)
end

"""
Read `.dat.gnu` file generated by `bands.x`.

In the output array, 
the first index is k-point index, 
and the second index is the band index.
This convention is *opposite* to the Ïµ_nk convention 
but agrees with the convention in the output file of `bands.x`.

Example:
```
nkp, nbnd = read_qe_bands_x_size("WTe2_bands.dat")
read_qe_bands_x_energy("WTe2_bands.dat.gnu", nkp, nbnd)
```

It should be noted that the energy levels in the output array 
faithfully represent what is shown in the output file, 
and Îµ_F is not deduced.
"""
function read_qe_bands_x_energy(band_plot_path, nkp, nbnd)
    coordinates = readdlm(band_plot_path)
    energies = reshape(coordinates[:, 2], (nkp, nbnd))
    energies
end

"""

"""
function read_qe_bands_x_spin(band_plot_path, nks, nbnd)
    spin_data = readlines(band_plot_path)
    spin_data = spin_data[2:end]
    spin_data = map(spin_data) do line
        map(x -> parse(Float64, x), split(line))
    end
    # Positions of lines containing three numbers, which are coordinates of k points
    kpoint_header_positions = findall(x -> x == 3, map(length, spin_data))
    deleteat!(spin_data, kpoint_header_positions)

    # Now the first index is band index, the second index is k index
    spin_data = reshape(cat(spin_data..., dims = 1), (nbnd, nks))
    # Now we have the same convention with `read_qe_bands_x_energy`
    spin_data' |> Matrix
end